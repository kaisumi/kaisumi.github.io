name: Fetch AI News

on:
  schedule:
    - cron: '0 0 * * *'  # 毎日UTC 0:00（日本時間9:00）に実行
  workflow_dispatch:  # 手動実行も可能

# リポジトリコンテンツへの書き込み権限を明示的に付与
permissions:
  contents: write

jobs:
  fetch-news:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create news fetcher script
        run: |
          cat > fetch-news.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const https = require('https');

          // 現在の日付を取得
          const today = new Date();
          const oneMonthAgo = new Date();
          oneMonthAgo.setMonth(today.getMonth() - 1);
          
          // 日付をYYYY-MM-DD形式に変換
          const formatDate = (date) => {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
          };
          
          const todayStr = formatDate(today);
          const oneMonthAgoStr = formatDate(oneMonthAgo);
          
          // Gemini APIへのプロンプト
          const prompt = `ITエンジニア向けに、${oneMonthAgoStr}から${todayStr}までの期間で最も重要と思われるAI関連のニュースを20件挙げてください。
          必ず最新のニュースを提供し、古い順ではなく新しい順（最新のものから）に並べてください。
          
          各ニュースについて、以下の情報を提供してください。
          1. タイトル (簡潔で分かりやすいもの)
          2. 短い要約 (2-3文程度)
          3. 主要な情報源のドメイン名 (例: techcrunch.com, openai.comなど)
          4. 発表日付 (YYYY-MM-DD形式)。必ず${oneMonthAgoStr}から${todayStr}の間の日付を使用してください。
          
          フォーマット例:
          タイトル: [ニュースタイトル]
          要約: [ニュースの要約]
          情報源: [ドメイン名]
          日付: [YYYY-MM-DD]
          
          --- (各ニュースの区切り)
          
          上記形式で20件お願いします。古いニュース（${oneMonthAgoStr}より前）は含めないでください。
          必ず最新のニュースから順番に並べてください。`;

          const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
          const payload = { contents: chatHistory };
          const apiKey = process.env.GEMINI_API_KEY;
          const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

          // APIリクエスト関数
          function makeRequest() {
            return new Promise((resolve, reject) => {
              const options = {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                }
              };

              const req = https.request(apiUrl, options, (res) => {
                let data = '';
                res.on('data', (chunk) => {
                  data += chunk;
                });
                res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    try {
                      const parsedData = JSON.parse(data);
                      resolve(parsedData);
                    } catch (error) {
                      console.error('Error parsing API response:', error);
                      reject(new Error(`Failed to parse API response: ${error.message}`));
                    }
                  } else {
                    console.error(`API request failed with status code ${res.statusCode}`);
                    reject(new Error(`API request failed with status code ${res.statusCode}: ${data}`));
                  }
                });
              });

              req.on('error', (error) => {
                console.error('Network error during API request:', error);
                reject(error);
              });

              // タイムアウト設定
              req.setTimeout(30000, () => {
                req.abort();
                reject(new Error('API request timed out after 30 seconds'));
              });

              req.write(JSON.stringify(payload));
              req.end();
            });
          }

          // ニュースデータを解析する関数
          function parseNewsItems(rawText) {
            const newsItems = rawText.split('---').map(item => item.trim()).filter(item => item);
            const parsedItems = [];
            
            // 日付の検証用
            const today = new Date();
            const oneMonthAgo = new Date();
            oneMonthAgo.setMonth(today.getMonth() - 1);
            
            console.log(`Filtering news between ${oneMonthAgo.toISOString().split('T')[0]} and ${today.toISOString().split('T')[0]}`);

            for (const itemText of newsItems) {
              const lines = itemText.split('\n').map(line => line.trim()).filter(line => line);
              const newsData = { title: '', summary: '', source: '', date: '' };
              let currentKey = null;
              let summaryLines = [];

              for (const line of lines) {
                if (line.toLowerCase().startsWith('タイトル:')) {
                  newsData.title = line.substring('タイトル:'.length).trim();
                  currentKey = 'title';
                } else if (line.toLowerCase().startsWith('要約:')) {
                  summaryLines.push(line.substring('要約:'.length).trim());
                  currentKey = 'summary';
                } else if (line.toLowerCase().startsWith('情報源:')) {
                  newsData.source = line.substring('情報源:'.length).trim();
                  currentKey = 'source';
                } else if (line.toLowerCase().startsWith('日付:')) {
                  newsData.date = line.substring('日付:'.length).trim();
                  currentKey = 'date';
                } else if (currentKey === 'summary') {
                  summaryLines.push(line);
                } else if (!newsData.title && !newsData.summary && !newsData.source && !newsData.date) {
                  if (!newsData.title) newsData.title = line;
                }
              }
              
              newsData.summary = summaryLines.join(' ');
              
              // フォールバック処理
              if (!newsData.title && lines.length > 0) {
                newsData.title = lines[0];
                if (lines.length > 1) {
                  newsData.summary = lines.slice(1).join(' ');
                }
              }
              
              // 日付の検証
              let isValidDate = false;
              if (newsData.date) {
                try {
                  const newsDate = new Date(newsData.date);
                  isValidDate = !isNaN(newsDate.getTime()) && 
                                newsDate >= oneMonthAgo && 
                                newsDate <= today;
                  
                  if (!isValidDate) {
                    console.log(`Invalid date found: ${newsData.date}, setting to today's date`);
                  }
                } catch (e) {
                  console.log(`Error parsing date: ${newsData.date}`);
                }
              }
              
              // 無効な日付の場合は現在の日付を設定
              if (!isValidDate) {
                newsData.date = formatDate(today);
              }
              
              if (newsData.title) {
                parsedItems.push(newsData);
              }
            }
            
            // 日付でソート（最新のニュースが先頭に来るように）
            parsedItems.sort((a, b) => {
              if (!a.date) return 1;
              if (!b.date) return -1;
              return new Date(b.date) - new Date(a.date);
            });
            
            return parsedItems;
          }

          // メイン処理
          async function main() {
            try {
              console.log('Fetching AI news from Gemini API...');
              console.log(`Target period: ${oneMonthAgoStr} to ${todayStr}`);
              
              const result = await makeRequest();
              
              if (result.candidates && result.candidates.length > 0 &&
                  result.candidates[0].content && result.candidates[0].content.parts &&
                  result.candidates[0].content.parts.length > 0) {
                
                const rawNewsText = result.candidates[0].content.parts[0].text;
                console.log('Raw response received, parsing news items...');
                
                const newsItems = parseNewsItems(rawNewsText);
                console.log(`Parsed ${newsItems.length} news items`);
                
                // 最大20件のニュースを保存
                const limitedItems = newsItems.slice(0, 20);
                
                // 結果をJSONファイルとして保存
                const outputData = {
                  items: limitedItems,
                  lastUpdated: new Date().toISOString()
                };
                
                fs.writeFileSync('ai-news.json', JSON.stringify(outputData, null, 2));
                console.log(`Successfully fetched and saved ${limitedItems.length} news items.`);
                
                // ニュースの件数が少ない場合は警告
                if (limitedItems.length < 5) {
                  console.warn('Warning: Less than 5 news items were fetched. Check the API response quality.');
                }
                
                // 日付の分布を確認
                const dateDistribution = {};
                for (const item of limitedItems) {
                  const date = item.date || 'unknown';
                  dateDistribution[date] = (dateDistribution[date] || 0) + 1;
                }
                console.log('Date distribution of news items:', dateDistribution);
              } else {
                throw new Error('Unexpected API response structure');
              }
            } catch (error) {
              console.error('Error fetching news:', error);
              // エラーの詳細をログに出力
              if (error.stack) {
                console.error('Stack trace:', error.stack);
              }
              process.exit(1);
            }
          }

          main();
          EOL

      - name: Fetch AI news
        run: node fetch-news.js
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      # GitHub Actionsの組み込みアクションを使用してコミットとプッシュを行う
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update AI news data"
          file_pattern: ai-news.json