name: Fetch AI News

on:
  schedule:
    - cron: '0 0 * * *'  # 毎日UTC 0:00（日本時間9:00）に実行
  workflow_dispatch:  # 手動実行も可能

# リポジトリコンテンツへの書き込み権限を明示的に付与
permissions:
  contents: write

jobs:
  fetch-news:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create news fetcher script
        run: |
          cat > fetch-news.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const https = require('https');

          // 現在の日付を取得
          const today = new Date();
          const oneMonthAgo = new Date();
          oneMonthAgo.setMonth(today.getMonth() - 1);
          
          // 日付をYYYY-MM-DD形式に変換
          const formatDate = (date) => {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
          };
          
          const todayStr = formatDate(today);
          const oneMonthAgoStr = formatDate(oneMonthAgo);
          
          // Gemini APIへのプロンプト
          const prompt = `ITエンジニア向けに、${oneMonthAgoStr}から${todayStr}までの期間で最も重要と思われるAI関連のニュースを20件挙げてください。
          必ず最新のニュースを提供し、古い順ではなく新しい順（最新のものから）に並べてください。
          
          各ニュースについて、以下の情報を提供してください。
          1. タイトル (簡潔で分かりやすいもの)
          2. 短い要約 (2-3文程度)
          3. 主要な情報源のドメイン名 (例: techcrunch.com, openai.comなど)
          4. 情報源の完全なURL (例: https://techcrunch.com/2025/06/04/ai-news-article)
          5. 発表日付 (YYYY-MM-DD形式)。必ず${oneMonthAgoStr}から${todayStr}の間の日付を使用してください。
          
          フォーマット例:
          タイトル: [ニュースタイトル]
          要約: [ニュースの要約]
          情報源: [ドメイン名]
          URL: [完全なURL]
          日付: [YYYY-MM-DD]
          
          --- (各ニュースの区切り)
          
          上記形式で20件お願いします。古いニュース（${oneMonthAgoStr}より前）は含めないでください。
          必ず最新のニュースから順番に並べてください。
          
          重要な注意事項:
          1. 各ニュースには必ず完全なURLを含めてください。
          2. URLは実際に存在する記事へのリンクを提供してください。
          3. 架空のURLや存在しない記事へのリンクは避けてください。
          4. 記事の具体的なURLが不明な場合は、その情報源の公式サイトのトップページURL（例：https://openai.com）を使用してください。
          5. 「仮のドメイン」や存在しないドメインは使用しないでください。
          6. 有名なニュースサイト（TechCrunch, The Verge, Wired, VentureBeat, MIT Technology Review, CNBC, Bloomberg, Reutersなど）や
             企業の公式サイト（openai.com, google.com, microsoft.com, meta.comなど）を情報源として使用してください。`;

          const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
          const payload = { contents: chatHistory };
          const apiKey = process.env.GEMINI_API_KEY;
          // apiUrlは削除 - 代わりにmakeRequest関数内でapiBaseUrlを使用

          // APIリクエスト関数
          function makeRequest() {
            return new Promise((resolve, reject) => {
              // APIキーをURLパラメータではなくヘッダーで送信するように変更
              const apiBaseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent';
              
              const options = {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'x-goog-api-key': apiKey // APIキーをヘッダーに設定
                }
              };

              const req = https.request(apiBaseUrl, options, (res) => {
                let data = '';
                res.on('data', (chunk) => {
                  data += chunk;
                });
                res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    try {
                      const parsedData = JSON.parse(data);
                      resolve(parsedData);
                    } catch (error) {
                      console.error('Error parsing API response:', error);
                      reject(new Error(`Failed to parse API response: ${error.message}`));
                    }
                  } else {
                    console.error(`API request failed with status code ${res.statusCode}`);
                    // APIキーが含まれる可能性のあるデータをログに出力しないように注意
                    reject(new Error(`API request failed with status code ${res.statusCode}`));
                  }
                });
              });

              req.on('error', (error) => {
                console.error('Network error during API request:', error);
                // エラーメッセージにAPIキーが含まれないように注意
                reject(new Error('Network error during API request'));
              });

              // タイムアウト設定
              req.setTimeout(120000, () => {
                req.destroy(new Error('timeout'));
                reject(new Error('API request timed out after 120 seconds'));
              });

              req.write(JSON.stringify(payload));
              req.end();
            });
          }

          /**
           * 文字列をサニタイズする関数
           * @param {string} str - サニタイズする文字列
           * @return {string} サニタイズされた文字列
           */
          function sanitizeString(str) {
            if (!str) return '';
            // 基本的なサニタイズ - 制御文字や特殊文字を削除
            return String(str)
              .replace(/[^\x20-\x7E\u3000-\u30FF\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/g, '') // 制御文字と一部の特殊文字を削除
              .trim();
          }

          /**
           * URLが有効かどうかを検証する関数
           * @param {string} url - 検証するURL
           * @return {boolean} URLが有効な場合はtrue、そうでない場合はfalse
           */
          function isValidUrl(url) {
            if (!url) return false;
            try {
              const parsedUrl = new URL(url);
              // プロトコルが http または https であることを確認
              if (!['http:', 'https:'].includes(parsedUrl.protocol)) {
                return false;
              }
              
              // 明らかに架空のドメインや仮のドメインを除外
              const fakeDomains = [
                'example.com', 'test.com', 'domain.com', 'website.com', 
                'ai-ethics.org', 'trucking.com', 'edtech.com', 'pharma.com', 
                'security.com', 'ai-art.com', 'climate.gov', 'smartcity.com',
                'ai-news.com', 'tech-news.com', 'ai-research.com'
              ];
              
              // ドメイン名が架空のドメインリストに含まれているかチェック
              if (fakeDomains.some(domain => parsedUrl.hostname === domain || 
                                            parsedUrl.hostname.endsWith('.' + domain))) {
                return false;
              }
              
              // 「仮のドメイン」という文字列を含むURLを除外
              if (url.includes('仮のドメイン')) {
                return false;
              }
              
              return true;
            } catch (e) {
              return false;
            }
          }

          /**
           * ドメイン名が有効かどうかを検証する関数
           * @param {string} domain - 検証するドメイン名
           * @return {boolean} ドメイン名が有効な場合はtrue、そうでない場合はfalse
           */
          function isValidDomain(domain) {
            if (!domain) return false;
            // 基本的なドメイン名の検証（英数字、ハイフン、ドット）
            const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9\-\.]+)?\.[a-zA-Z]{2,}$/;
            return domainRegex.test(domain);
          }

          // ニュースデータを解析する関数
          function parseNewsItems(rawText) {
            const newsItems = rawText.split('---').map(item => item.trim()).filter(item => item);
            const parsedItems = [];
            
            // 日付の検証用
            const today = new Date();
            const oneMonthAgo = new Date();
            oneMonthAgo.setMonth(today.getMonth() - 1);
            
            console.log(`Filtering news between ${oneMonthAgo.toISOString().split('T')[0]} and ${today.toISOString().split('T')[0]}`);

            for (const itemText of newsItems) {
              const lines = itemText.split('\n').map(line => line.trim()).filter(line => line);
              const newsData = { title: '', summary: '', source: '', url: '', date: '', domain: '' };
              let currentKey = null;
              let summaryLines = [];

              for (const line of lines) {
                if (line.toLowerCase().startsWith('タイトル:')) {
                  newsData.title = sanitizeString(line.substring('タイトル:'.length).trim());
                  currentKey = 'title';
                } else if (line.toLowerCase().startsWith('要約:')) {
                  summaryLines.push(sanitizeString(line.substring('要約:'.length).trim()));
                  currentKey = 'summary';
                } else if (line.toLowerCase().startsWith('情報源:')) {
                  newsData.source = sanitizeString(line.substring('情報源:'.length).trim());
                  currentKey = 'source';
                } else if (line.toLowerCase().startsWith('url:')) {
                  const rawUrl = line.substring('url:'.length).trim();
                  // URLの検証
                  if (isValidUrl(rawUrl)) {
                    newsData.url = rawUrl;
                  }
                  currentKey = 'url';
                } else if (line.toLowerCase().startsWith('日付:')) {
                  newsData.date = sanitizeString(line.substring('日付:'.length).trim());
                  currentKey = 'date';
                } else if (currentKey === 'summary') {
                  summaryLines.push(sanitizeString(line));
                } else if (!newsData.title && !newsData.summary && !newsData.source && !newsData.url && !newsData.date) {
                  if (!newsData.title) newsData.title = sanitizeString(line);
                }
              }
              
              newsData.summary = summaryLines.join(' ');
              
              // フォールバック処理
              if (!newsData.title && lines.length > 0) {
                newsData.title = sanitizeString(lines[0]);
                if (lines.length > 1) {
                  newsData.summary = sanitizeString(lines.slice(1).join(' '));
                }
              }
              
              // 日付の検証
              let isValidDate = false;
              if (newsData.date) {
                try {
                  const newsDate = new Date(newsData.date);
                  isValidDate = !isNaN(newsDate.getTime()) && 
                                newsDate >= oneMonthAgo && 
                                newsDate <= today;
                  
                  if (!isValidDate) {
                    console.log(`Invalid date found: ${newsData.date}, setting to today's date`);
                  }
                } catch (e) {
                  console.log(`Error parsing date: ${newsData.date}`);
                }
              }
              
              // 無効な日付の場合は現在の日付を設定
              if (!isValidDate) {
                newsData.date = formatDate(today);
              }
              
              // URLの検証と処理
              if (newsData.url) {
                if (!isValidUrl(newsData.url)) {
                  console.log(`Invalid URL found: ${newsData.url}, will try to replace with domain homepage`);
                  newsData.url = '';
                } else {
                  // URLが有効な場合でも、パスが存在するかどうかは確認できないため、
                  // ドメイン名を抽出して保存しておく
                  try {
                    const parsedUrl = new URL(newsData.url);
                    newsData.domain = parsedUrl.hostname;
                  } catch (e) {
                    // パースに失敗した場合は何もしない
                  }
                }
              }
              
              // URLが提供されていない場合は、sourceからURLを構築
              if (!newsData.url) {
                // まず、sourceが有効なドメイン名かチェック
                if (newsData.source && isValidDomain(newsData.source)) {
                  newsData.url = `https://${newsData.source}`;
                  console.log(`URL not provided for "${newsData.title}", generated from source: ${newsData.url}`);
                } 
                // sourceが無効な場合でも、domainが抽出されていれば使用
                else if (newsData.domain) {
                  newsData.url = `https://${newsData.domain}`;
                  console.log(`Invalid URL for "${newsData.title}", using domain homepage instead: ${newsData.url}`);
                  // sourceも更新
                  newsData.source = newsData.domain;
                }
                // それでもURLが生成できない場合は、有名なAI関連サイトのURLを使用
                else {
                  const fallbackDomains = [
                    'techcrunch.com', 'theverge.com', 'wired.com', 'venturebeat.com', 
                    'technologyreview.com', 'cnbc.com', 'bloomberg.com', 'reuters.com',
                    'openai.com', 'google.com', 'microsoft.com', 'meta.com', 'nvidia.com'
                  ];
                  
                  // ニュースのタイトルや要約に基づいて、最も関連性の高いドメインを選択
                  let selectedDomain = fallbackDomains[0]; // デフォルト
                  const content = (newsData.title + ' ' + newsData.summary).toLowerCase();
                  
                  if (content.includes('openai') || content.includes('gpt')) {
                    selectedDomain = 'openai.com';
                  } else if (content.includes('google') || content.includes('gemini')) {
                    selectedDomain = 'google.com';
                  } else if (content.includes('microsoft') || content.includes('azure')) {
                    selectedDomain = 'microsoft.com';
                  } else if (content.includes('meta') || content.includes('facebook')) {
                    selectedDomain = 'meta.com';
                  } else if (content.includes('nvidia')) {
                    selectedDomain = 'nvidia.com';
                  }
                  
                  newsData.url = `https://${selectedDomain}`;
                  newsData.source = selectedDomain;
                  console.log(`No valid URL or domain for "${newsData.title}", using fallback: ${newsData.url}`);
                }
              }
              
              // タイトルが存在し、かつ最低限の長さがある場合のみ追加
              if (newsData.title && newsData.title.length >= 3) {
                parsedItems.push(newsData);
              } else {
                console.log(`Skipping news item with invalid title: "${newsData.title}"`);
              }
            }
            
            // 日付でソート（最新のニュースが先頭に来るように）
            parsedItems.sort((a, b) => {
              if (!a.date) return 1;
              if (!b.date) return -1;
              return new Date(b.date) - new Date(a.date);
            });
            
            return parsedItems;
          }

          // メイン処理
          async function main() {
            try {
              console.log('Fetching AI news from Gemini API...');
              console.log(`Target period: ${oneMonthAgoStr} to ${todayStr}`);
              
              const result = await makeRequest();
              
              if (result.candidates && result.candidates.length > 0 &&
                  result.candidates[0].content && result.candidates[0].content.parts &&
                  result.candidates[0].content.parts.length > 0) {
                
                const rawNewsText = result.candidates[0].content.parts[0].text;
                console.log('Raw response received, parsing news items...');
                
                const newsItems = parseNewsItems(rawNewsText);
                console.log(`Parsed ${newsItems.length} news items`);
                
                // 最大20件のニュースを保存
                const limitedItems = newsItems.slice(0, 20);
                
                // 結果をJSONファイルとして保存
                const outputData = {
                  items: limitedItems,
                  lastUpdated: new Date().toISOString()
                };
                
                fs.writeFileSync('ai-news.json', JSON.stringify(outputData, null, 2));
                console.log(`Successfully fetched and saved ${limitedItems.length} news items.`);
                
                // ニュースの件数が少ない場合は警告
                if (limitedItems.length < 5) {
                  console.warn('Warning: Less than 5 news items were fetched. Check the API response quality.');
                }
                
                // 日付の分布を確認
                const dateDistribution = {};
                for (const item of limitedItems) {
                  const date = item.date || 'unknown';
                  dateDistribution[date] = (dateDistribution[date] || 0) + 1;
                }
                console.log('Date distribution of news items:', dateDistribution);
              } else {
                throw new Error('Unexpected API response structure');
              }
            } catch (error) {
              // APIキーなどの機密情報が含まれる可能性のあるエラーメッセージを安全に処理
              console.error('Error fetching news:', error.message ? error.message.replace(/key=[\w\-]+/g, 'key=REDACTED') : 'Unknown error');
              
              // スタックトレースからも機密情報を削除
              if (error.stack) {
                const sanitizedStack = error.stack.replace(/key=[\w\-]+/g, 'key=REDACTED');
                console.error('Stack trace:', sanitizedStack);
              }
              
              process.exit(1);
            }
          }

          main();
          EOL

      - name: Fetch AI news
        run: node fetch-news.js
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      # GitHub Actionsの組み込みアクションを使用してコミットとプッシュを行う
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update AI news data"
          file_pattern: ai-news.json